<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>DataClassShouldBeImmutable:TaskButton.kt$TaskButton$private var taskUpdatedCallback: ((button: TaskButton, taskData: TaskData?) -&gt; Unit)? = null</ID>
    <ID>LongMethod:SubmissionLocalDataStoreConverterTest.kt$SubmissionLocalDataStoreConverterTest$@Test fun testToSubmission()</ID>
    <ID>LoopWithTooManyJumpStatements:DataBindingIdlingResource.kt$DataBindingIdlingResource$for (b in bindings()) { if (b == null) { continue } if (!b.hasPendingBindings()) { idle = true break } }</ID>
    <ID>OutdatedDocumentation:Job.kt$Job</ID>
    <ID>OutdatedDocumentation:Submission.kt$Submission</ID>
    <ID>UndocumentedPublicClass:AbstractDialogFragment.kt$AbstractDialogFragment : AppCompatDialogFragment</ID>
    <ID>UndocumentedPublicClass:AbstractFragment.kt$AbstractFragment : Fragment</ID>
    <ID>UndocumentedPublicClass:AbstractTaskFragment.kt$AbstractTaskFragment&lt;T : AbstractTaskViewModel&gt; : AbstractFragment</ID>
    <ID>UndocumentedPublicClass:AbstractView.kt$AbstractView : FrameLayout</ID>
    <ID>UndocumentedPublicClass:AbstractViewModel.kt$AbstractViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:ActivateSurveyUseCase.kt$ActivateSurveyUseCase</ID>
    <ID>UndocumentedPublicClass:AuthenticationManager.kt$AuthenticationManager</ID>
    <ID>UndocumentedPublicClass:AuthenticationModule.kt$AuthenticationModule</ID>
    <ID>UndocumentedPublicClass:BackPressListener.kt$BackPressListener</ID>
    <ID>UndocumentedPublicClass:BaseMap.kt$BaseMap$BaseMapType</ID>
    <ID>UndocumentedPublicClass:BaseMapDao.kt$BaseMapDao : BaseDao</ID>
    <ID>UndocumentedPublicClass:BaseMapEntity.kt$BaseMapEntity</ID>
    <ID>UndocumentedPublicClass:BaseMapEntity.kt$BaseMapEntity$BaseMapEntityType</ID>
    <ID>UndocumentedPublicClass:BaseMapNestedObject.kt$BaseMapNestedObject</ID>
    <ID>UndocumentedPublicClass:BaseMapViewModel.kt$BaseMapViewModel : AbstractViewModel</ID>
    <ID>UndocumentedPublicClass:BitmapUtil.kt$BitmapUtil</ID>
    <ID>UndocumentedPublicClass:BottomSheetState.kt$BottomSheetState</ID>
    <ID>UndocumentedPublicClass:BottomSheetState.kt$BottomSheetState$Visibility</ID>
    <ID>UndocumentedPublicClass:ButtonAction.kt$ButtonAction$Theme</ID>
    <ID>UndocumentedPublicClass:ButtonAction.kt$ButtonAction$Type</ID>
    <ID>UndocumentedPublicClass:CameraPosition.kt$CameraPosition</ID>
    <ID>UndocumentedPublicClass:Constants.kt$Constants</ID>
    <ID>UndocumentedPublicClass:CoroutineDispatchersModule.kt$CoroutineDispatchersModule</ID>
    <ID>UndocumentedPublicClass:CoroutineDispatchersModule.kt$DefaultDispatcher</ID>
    <ID>UndocumentedPublicClass:CoroutineDispatchersModule.kt$IoDispatcher</ID>
    <ID>UndocumentedPublicClass:CoroutineDispatchersModule.kt$MainDispatcher</ID>
    <ID>UndocumentedPublicClass:CoroutineDispatchersModule.kt$MainImmediateDispatcher</ID>
    <ID>UndocumentedPublicClass:CoroutineScopesModule.kt$CoroutinesScopesModule</ID>
    <ID>UndocumentedPublicClass:DataCollectionViewPagerAdapterFactory.kt$DataCollectionViewPagerAdapterFactory</ID>
    <ID>UndocumentedPublicClass:DataStoreException.kt$DataStoreException : RuntimeException</ID>
    <ID>UndocumentedPublicClass:DataSubmissionConfirmationDialogFragment.kt$DataSubmissionConfirmationDialogFragment : AbstractDialogFragment</ID>
    <ID>UndocumentedPublicClass:DateTaskFragment.kt$DateTaskFragment : AbstractTaskFragment</ID>
    <ID>UndocumentedPublicClass:DateTaskViewModel.kt$DateTaskViewModel : AbstractTaskViewModel</ID>
    <ID>UndocumentedPublicClass:Debug.kt$Debug</ID>
    <ID>UndocumentedPublicClass:DrawableUtil.kt$DrawableUtil</ID>
    <ID>UndocumentedPublicClass:DropAPinMapFragment.kt$DropAPinMapFragment : AbstractMapContainerFragment</ID>
    <ID>UndocumentedPublicClass:DropAPinTaskFragment.kt$DropAPinTaskFragment : AbstractTaskFragment</ID>
    <ID>UndocumentedPublicClass:DropAPinTaskViewModel.kt$DropAPinTaskViewModel : AbstractTaskViewModel</ID>
    <ID>UndocumentedPublicClass:Enums.kt$Enums</ID>
    <ID>UndocumentedPublicClass:FileUtil.kt$FileUtil</ID>
    <ID>UndocumentedPublicClass:FirebaseStorageManager.kt$FirebaseStorageManager : RemoteStorageManager</ID>
    <ID>UndocumentedPublicClass:FirestoreDataStore.kt$FirestoreDataStore : RemoteDataStore</ID>
    <ID>UndocumentedPublicClass:FirestoreUuidGenerator.kt$FirestoreUuidGenerator : OfflineUuidGenerator</ID>
    <ID>UndocumentedPublicClass:FluentCollectionReference.kt$FluentCollectionReference</ID>
    <ID>UndocumentedPublicClass:FluentDocumentReference.kt$FluentDocumentReference</ID>
    <ID>UndocumentedPublicClass:FragmentManagerModule.kt$FragmentManagerModule</ID>
    <ID>UndocumentedPublicClass:GeometryType.kt$GeometryType</ID>
    <ID>UndocumentedPublicClass:GeometryValidator.kt$GeometryValidator</ID>
    <ID>UndocumentedPublicClass:GeometryWrapper.kt$GeometryWrapper</ID>
    <ID>UndocumentedPublicClass:GeometryWrapperTypeConverter.kt$GeometryWrapperTypeConverter</ID>
    <ID>UndocumentedPublicClass:GoogleApiManager.kt$GoogleApiManager</ID>
    <ID>UndocumentedPublicClass:GoogleAuthenticationManager.kt$GoogleAuthenticationManager : AuthenticationManager</ID>
    <ID>UndocumentedPublicClass:GroundApplication.kt$GroundApplication : MultiDexApplicationProvider</ID>
    <ID>UndocumentedPublicClass:GroundApplicationModule.kt$GroundApplicationModule</ID>
    <ID>UndocumentedPublicClass:HiltTestActivity.kt$HiltTestActivity : AbstractActivity</ID>
    <ID>UndocumentedPublicClass:HomeScreenMapContainerLayoutBehavior.kt$HomeScreenMapContainerLayoutBehavior : BottomSheetDependentBehavior</ID>
    <ID>UndocumentedPublicClass:HomeScreenMapContainerViewModel.kt$HomeScreenMapContainerViewModel : BaseMapViewModel</ID>
    <ID>UndocumentedPublicClass:HomeScreenViewModel.kt$HomeScreenViewModel : AbstractViewModel</ID>
    <ID>UndocumentedPublicClass:JobDao.kt$JobDao : BaseDao</ID>
    <ID>UndocumentedPublicClass:JobEntity.kt$JobEntity</ID>
    <ID>UndocumentedPublicClass:JsonArrayTypeConverter.kt$JsonArrayTypeConverter</ID>
    <ID>UndocumentedPublicClass:JsonObjectTypeConverter.kt$JsonObjectTypeConverter</ID>
    <ID>UndocumentedPublicClass:LocalDataStoreModule.kt$LocalDataStoreModule</ID>
    <ID>UndocumentedPublicClass:LocalDatabaseModule.kt$LocalDatabaseModule</ID>
    <ID>UndocumentedPublicClass:LocalLocationOfInterestStore.kt$LocalLocationOfInterestStore : LocalMutationStore</ID>
    <ID>UndocumentedPublicClass:LocalOfflineAreaStore.kt$LocalOfflineAreaStore</ID>
    <ID>UndocumentedPublicClass:LocalTileSetStore.kt$LocalTileSetStore</ID>
    <ID>UndocumentedPublicClass:LocationManager.kt$LocationManager</ID>
    <ID>UndocumentedPublicClass:LocationOfInterestDataTypeSelectorDialogFragment.kt$LocationOfInterestDataTypeSelectorDialogFragment : AbstractDialogFragment</ID>
    <ID>UndocumentedPublicClass:LocationOfInterestMutation.kt$LocationOfInterestMutation : Mutation</ID>
    <ID>UndocumentedPublicClass:LocationOfInterestType.kt$LocationOfInterestType</ID>
    <ID>UndocumentedPublicClass:LocationTaskData.kt$LocationTaskData : TaskData</ID>
    <ID>UndocumentedPublicClass:LoiCardViewModel.kt$LoiCardViewModel : AbstractViewModel</ID>
    <ID>UndocumentedPublicClass:LoiCollectionReference.kt$LoiCollectionReference : FluentCollectionReference</ID>
    <ID>UndocumentedPublicClass:LoiDocumentReference.kt$LoiDocumentReference : FluentDocumentReference</ID>
    <ID>UndocumentedPublicClass:MakeSurveyAvailableOfflineUseCase.kt$MakeSurveyAvailableOfflineUseCase</ID>
    <ID>UndocumentedPublicClass:MapCardUiData.kt$MapCardUiData$LoiCardUiData : MapCardUiData</ID>
    <ID>UndocumentedPublicClass:MapCardUiData.kt$MapCardUiData$SuggestLoiCardUiData : MapCardUiData</ID>
    <ID>UndocumentedPublicClass:MapController.kt$MapController</ID>
    <ID>UndocumentedPublicClass:MapProviderModule.kt$MapProviderModule</ID>
    <ID>UndocumentedPublicClass:MarkerIconFactory.kt$MarkerIconFactory</ID>
    <ID>UndocumentedPublicClass:MbtilesFootprintParser.kt$MbtilesFootprintParser</ID>
    <ID>UndocumentedPublicClass:MultipleChoice.kt$MultipleChoice$Cardinality</ID>
    <ID>UndocumentedPublicClass:MultipleChoiceDao.kt$MultipleChoiceDao : BaseDao</ID>
    <ID>UndocumentedPublicClass:MultipleChoiceEntity.kt$MultipleChoiceEntity</ID>
    <ID>UndocumentedPublicClass:MultipleChoiceTaskViewModel.kt$MultipleChoiceTaskViewModel : AbstractTaskViewModel</ID>
    <ID>UndocumentedPublicClass:Mutation.kt$Mutation$Type</ID>
    <ID>UndocumentedPublicClass:NotificationManager.kt$NotificationManager</ID>
    <ID>UndocumentedPublicClass:NotificationManager.kt$NotificationManager$UploadState</ID>
    <ID>UndocumentedPublicClass:NumberTaskViewModel.kt$NumberTaskViewModel : AbstractTaskViewModel</ID>
    <ID>UndocumentedPublicClass:OfflineArea.kt$OfflineArea$State</ID>
    <ID>UndocumentedPublicClass:OfflineAreaRepository.kt$OfflineAreaRepository</ID>
    <ID>UndocumentedPublicClass:OfflineAreaSelectorFragment.kt$OfflineAreaSelectorFragment : AbstractMapContainerFragment</ID>
    <ID>UndocumentedPublicClass:OfflineAreaSelectorViewModel.kt$OfflineAreaSelectorViewModel : BaseMapViewModel</ID>
    <ID>UndocumentedPublicClass:OfflineAreaSelectorViewModel.kt$OfflineAreaSelectorViewModel$DownloadMessage</ID>
    <ID>UndocumentedPublicClass:OptionDao.kt$OptionDao : BaseDao</ID>
    <ID>UndocumentedPublicClass:OptionEntity.kt$OptionEntity</ID>
    <ID>UndocumentedPublicClass:PhotoTaskViewModel.kt$PhotoTaskViewModel : AbstractTaskViewModel</ID>
    <ID>UndocumentedPublicClass:PolygonDrawingInfoDialogFragment.kt$PolygonDrawingInfoDialogFragment : AbstractDialogFragment</ID>
    <ID>UndocumentedPublicClass:PolygonDrawingMapFragment.kt$PolygonDrawingMapFragment : AbstractMapContainerFragment</ID>
    <ID>UndocumentedPublicClass:PolygonDrawingTaskFragment.kt$PolygonDrawingTaskFragment : AbstractTaskFragment</ID>
    <ID>UndocumentedPublicClass:PolygonDrawingViewModel.kt$PolygonDrawingViewModel : AbstractTaskViewModel</ID>
    <ID>UndocumentedPublicClass:ReactivateLastSurveyUseCase.kt$ReactivateLastSurveyUseCase</ID>
    <ID>UndocumentedPublicClass:RemoteDataEvent.kt$RemoteDataEvent$EventType</ID>
    <ID>UndocumentedPublicClass:RemotePersistenceModule.kt$RemotePersistenceModule</ID>
    <ID>UndocumentedPublicClass:Role.kt$Role</ID>
    <ID>UndocumentedPublicClass:RoomOfflineAreaStore.kt$RoomOfflineAreaStore : LocalOfflineAreaStore</ID>
    <ID>UndocumentedPublicClass:RoomTileSetStore.kt$RoomTileSetStore : LocalTileSetStore</ID>
    <ID>UndocumentedPublicClass:RxSchedulers.kt$RxSchedulers : Schedulers</ID>
    <ID>UndocumentedPublicClass:Schedulers.kt$Schedulers</ID>
    <ID>UndocumentedPublicClass:SchedulersModule.kt$SchedulersModule</ID>
    <ID>UndocumentedPublicClass:SelectMultipleOptionAdapter.kt$SelectMultipleOptionAdapter$ViewHolder : ViewHolder</ID>
    <ID>UndocumentedPublicClass:SettingsActivity.kt$SettingsActivity : AbstractActivity</ID>
    <ID>UndocumentedPublicClass:SettingsManager.kt$SettingsChangeRequestCanceled : Exception</ID>
    <ID>UndocumentedPublicClass:SharedPreferencesModule.kt$SharedPreferencesModule</ID>
    <ID>UndocumentedPublicClass:SignInFragment.kt$SignInFragment : AbstractFragmentBackPressListener</ID>
    <ID>UndocumentedPublicClass:SignInState.kt$SignInState</ID>
    <ID>UndocumentedPublicClass:SignInState.kt$SignInState$State</ID>
    <ID>UndocumentedPublicClass:SignInViewModel.kt$SignInViewModel : AbstractViewModel</ID>
    <ID>UndocumentedPublicClass:StartupFragment.kt$StartupFragment : AbstractFragment</ID>
    <ID>UndocumentedPublicClass:Style.kt$Style</ID>
    <ID>UndocumentedPublicClass:StyleTypeConverter.kt$StyleTypeConverter</ID>
    <ID>UndocumentedPublicClass:SubmissionCollectionReference.kt$SubmissionCollectionReference : FluentCollectionReference</ID>
    <ID>UndocumentedPublicClass:SubmissionDao.kt$SubmissionDao : BaseDao</ID>
    <ID>UndocumentedPublicClass:SubmissionDetailsFragment.kt$SubmissionDetailsFragment : AbstractFragment</ID>
    <ID>UndocumentedPublicClass:SubmissionDetailsViewModel.kt$SubmissionDetailsViewModel : AbstractViewModel</ID>
    <ID>UndocumentedPublicClass:SubmissionDocumentReference.kt$SubmissionDocumentReference : FluentDocumentReference</ID>
    <ID>UndocumentedPublicClass:SubmissionMutation.kt$SubmissionMutation : Mutation</ID>
    <ID>UndocumentedPublicClass:SubmissionStore.kt$SubmissionStore : LocalMutationStore</ID>
    <ID>UndocumentedPublicClass:SuggestLoiCardViewModel.kt$SuggestLoiCardViewModel : AbstractViewModel</ID>
    <ID>UndocumentedPublicClass:SurveyDao.kt$SurveyDao : BaseDao</ID>
    <ID>UndocumentedPublicClass:SurveyDocumentReference.kt$SurveyDocumentReference : FluentDocumentReference</ID>
    <ID>UndocumentedPublicClass:SurveyEntity.kt$SurveyEntity</ID>
    <ID>UndocumentedPublicClass:SurveyItem.kt$SurveyItem</ID>
    <ID>UndocumentedPublicClass:SurveysCollectionReference.kt$SurveysCollectionReference : FluentCollectionReference</ID>
    <ID>UndocumentedPublicClass:SyncSurveyUseCase.kt$SyncSurveyUseCase</ID>
    <ID>UndocumentedPublicClass:TaskDao.kt$TaskDao : BaseDao</ID>
    <ID>UndocumentedPublicClass:TaskEntity.kt$TaskEntity</ID>
    <ID>UndocumentedPublicClass:TaskEntityType.kt$TaskEntityType : IntEnum</ID>
    <ID>UndocumentedPublicClass:TermsOfServiceCollectionReference.kt$TermsOfServiceCollectionReference : FluentCollectionReference</ID>
    <ID>UndocumentedPublicClass:TermsOfServiceDocument.kt$TermsOfServiceDocument</ID>
    <ID>UndocumentedPublicClass:TermsOfServiceDocumentReference.kt$TermsOfServiceDocumentReference : FluentDocumentReference</ID>
    <ID>UndocumentedPublicClass:TermsOfServiceFragment.kt$TermsOfServiceFragment : AbstractFragmentBackPressListener</ID>
    <ID>UndocumentedPublicClass:TermsOfServiceRepository.kt$TermsOfServiceRepository</ID>
    <ID>UndocumentedPublicClass:TermsOfServiceViewModel.kt$TermsOfServiceViewModel : AbstractViewModel</ID>
    <ID>UndocumentedPublicClass:TextTaskViewModel.kt$TextTaskViewModel : AbstractTaskViewModel</ID>
    <ID>UndocumentedPublicClass:TileSet.kt$TileSet$State</ID>
    <ID>UndocumentedPublicClass:TileSetDao.kt$TileSetDao : BaseDao</ID>
    <ID>UndocumentedPublicClass:TileSetEntity.kt$TileSetEntity</ID>
    <ID>UndocumentedPublicClass:TimeTaskFragment.kt$TimeTaskFragment : AbstractTaskFragment</ID>
    <ID>UndocumentedPublicClass:TimeTaskViewModel.kt$TimeTaskViewModel : AbstractTaskViewModel</ID>
    <ID>UndocumentedPublicClass:TwoLineToolbar.kt$TwoLineToolbar : Toolbar</ID>
    <ID>UndocumentedPublicClass:UserDao.kt$UserDao : BaseDao</ID>
    <ID>UndocumentedPublicClass:UserEntity.kt$UserEntity</ID>
    <ID>UndocumentedPublicClass:ViewModelModule.kt$ViewModelModule</ID>
    <ID>UndocumentedPublicClass:ViewUtil.kt$ViewUtil</ID>
    <ID>UndocumentedPublicClass:WorkManagerModule.kt$WorkManagerModule</ID>
    <ID>UndocumentedPublicFunction:AbstractActivity.kt$AbstractActivity$fun setActionBar(toolbar: TwoLineToolbar, @DrawableRes upIconId: Int)</ID>
    <ID>UndocumentedPublicFunction:AbstractActivity.kt$AbstractActivity$fun setActionBar(toolbar: TwoLineToolbar, showTitle: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AbstractFragment.kt$AbstractFragment$fun replaceFragment(@IdRes containerViewId: Int, fragment: Fragment)</ID>
    <ID>UndocumentedPublicFunction:AbstractTaskFragment.kt$AbstractTaskFragment$@TestOnly fun getButtons()</ID>
    <ID>UndocumentedPublicFunction:AbstractTaskFragment.kt$AbstractTaskFragment$fun addUndoButton()</ID>
    <ID>UndocumentedPublicFunction:AbstractTaskViewModel.kt$AbstractTaskViewModel$fun initialize(task: Task, taskData: Optional&lt;TaskData&gt;)</ID>
    <ID>UndocumentedPublicFunction:AbstractTaskViewModel.kt$AbstractTaskViewModel$fun isTaskOptional(): Boolean</ID>
    <ID>UndocumentedPublicFunction:AbstractTaskViewModel.kt$AbstractTaskViewModel$fun setResponse(taskData: Optional&lt;TaskData&gt;)</ID>
    <ID>UndocumentedPublicFunction:AbstractTaskViewModel.kt$AbstractTaskViewModel$fun taskLabel(): String</ID>
    <ID>UndocumentedPublicFunction:AbstractTaskViewModel.kt$AbstractTaskViewModel$open fun clearResponse()</ID>
    <ID>UndocumentedPublicFunction:ActivateSurveyUseCase.kt$ActivateSurveyUseCase$suspend operator fun invoke(surveyId: String)</ID>
    <ID>UndocumentedPublicFunction:AuthenticationManager.kt$AuthenticationManager$fun init()</ID>
    <ID>UndocumentedPublicFunction:AuthenticationManager.kt$AuthenticationManager$fun signIn()</ID>
    <ID>UndocumentedPublicFunction:AuthenticationManager.kt$AuthenticationManager$fun signOut()</ID>
    <ID>UndocumentedPublicFunction:BackPressListener.kt$BackPressListener$fun onBack(): Boolean</ID>
    <ID>UndocumentedPublicFunction:BaseDao.kt$BaseDao$@Delete fun delete(entity: E): Completable</ID>
    <ID>UndocumentedPublicFunction:BaseDao.kt$BaseDao$@Insert fun insert(entity: E): Completable</ID>
    <ID>UndocumentedPublicFunction:BaseDao.kt$BaseDao$@Update fun updateAll(entities: List&lt;E&gt;): Completable</ID>
    <ID>UndocumentedPublicFunction:BaseDao.kt$BaseDao$@Update suspend fun updateSuspend(entity: E): Int</ID>
    <ID>UndocumentedPublicFunction:BaseMap.kt$BaseMap.Companion$fun typeFromExtension(url: String): BaseMapType</ID>
    <ID>UndocumentedPublicFunction:BaseMapDao.kt$BaseMapDao$@Query("DELETE FROM offline_base_map_source WHERE survey_id = :surveyId") fun deleteBySurveyId(surveyId: String): Completable</ID>
    <ID>UndocumentedPublicFunction:BaseMapViewModel.kt$BaseMapViewModel$fun getLocationLockEnabled(): LiveData&lt;Boolean&gt;</ID>
    <ID>UndocumentedPublicFunction:BaseMapViewModel.kt$BaseMapViewModel$fun setLocationLockEnabled(enabled: Boolean)</ID>
    <ID>UndocumentedPublicFunction:BitmapUtil.kt$BitmapUtil$fun bitmapDescriptorFromVector(resId: Int): BitmapDescriptor</ID>
    <ID>UndocumentedPublicFunction:BottomSheetState.kt$BottomSheetState.Companion$@JvmStatic fun hidden()</ID>
    <ID>UndocumentedPublicFunction:BottomSheetState.kt$BottomSheetState.Companion$@JvmStatic fun visible(locationOfInterest: LocationOfInterest)</ID>
    <ID>UndocumentedPublicFunction:CameraPosition.kt$CameraPosition$fun serialize(): String</ID>
    <ID>UndocumentedPublicFunction:CameraPosition.kt$CameraPosition.Companion$fun deserialize(serializedValue: String): CameraPosition?</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$@Deprecated( "Use toLocalDataStoreObject(User) instead", ReplaceWith("toLocalDataStoreObject(auditInfo.user)") ) fun LocationOfInterestMutation.toLocalDataStoreObject(auditInfo: AuditInfo)</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$@Throws(LocalDataConsistencyException::class) fun SubmissionMutationEntity.toModelObject(survey: Survey): SubmissionMutation</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun AuditInfo.toLocalDataStoreObject(): AuditInfoEntity</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun AuditInfoEntity.toModelObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun BaseMap.toLocalDataStoreObject(surveyId: String)</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun BaseMapEntity.toModelObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun Bounds.toGoogleMapsObject(): LatLngBounds</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun Coordinate.toGoogleMapsObject(): LatLng</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun Geometry.toLocalDataStoreObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun Job.toLocalDataStoreObject(surveyId: String): JobEntity</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun JobEntityAndRelations.toModelObject(): Job</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun LatLng.toCoordinate(): Coordinate</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun LatLng.toModelObject(): Coordinate</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun LatLngBounds.toModelObject(): Bounds</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun Location.toCoordinate(): Coordinate</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun LocationOfInterest.toLocalDataStoreObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun LocationOfInterestEntity.toModelObject(survey: Survey): LocationOfInterest</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun LocationOfInterestMutation.toLocalDataStoreObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun LocationOfInterestMutation.toLocalDataStoreObject(user: User): LocationOfInterestEntity</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun LocationOfInterestMutationEntity.toModelObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun MultipleChoice.toLocalDataStoreObject(taskId: String): MultipleChoiceEntity</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun MultipleChoiceEntity.toModelObject(optionEntities: List&lt;OptionEntity&gt;): MultipleChoice</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun OfflineArea.toOfflineAreaEntity()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun OfflineAreaEntity.toModelObject(): OfflineArea</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun Option.toLocalDataStoreObject(taskId: String)</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun OptionEntity.toModelObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun Point.toLatLng(): LatLng</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun Submission.toLocalDataStoreObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun SubmissionEntity.toModelObject(loi: LocationOfInterest): Submission</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun SubmissionMutation.toLocalDataStoreObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun SubmissionMutation.toLocalDataStoreObject(created: AuditInfo): SubmissionEntity</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun Survey.toLocalDataStoreObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun SurveyEntityAndRelations.toModelObject(): Survey</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun Task.toLocalDataStoreObject(jobId: String?)</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun TaskEntityAndRelations.toModelObject(): Task</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun TileSet.toLocalDataStoreObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun TileSetEntity.toModelObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun User.toLocalDataStoreObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun UserEntity.toModelObject()</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun formatVertices(vertices: List&lt;Point&gt;): String?</ID>
    <ID>UndocumentedPublicFunction:ConverterExt.kt$fun parseVertices(vertices: String?): List&lt;Point&gt;</ID>
    <ID>UndocumentedPublicFunction:DataCollectionViewModel.kt$DataCollectionViewModel$fun getTaskViewModel(position: Int): AbstractTaskViewModel</ID>
    <ID>UndocumentedPublicFunction:DataCollectionViewModel.kt$DataCollectionViewModel$fun setCurrentPosition(position: Int)</ID>
    <ID>UndocumentedPublicFunction:DataCollectionViewModel.kt$DataCollectionViewModel.Companion$fun getViewModelClass(taskType: Task.Type): Class&lt;out AbstractTaskViewModel&gt;</ID>
    <ID>UndocumentedPublicFunction:DataCollectionViewPagerAdapterFactory.kt$DataCollectionViewPagerAdapterFactory$fun create( fragment: Fragment, tasks: List&lt;Task&gt;, ): DataCollectionViewPagerAdapter</ID>
    <ID>UndocumentedPublicFunction:DataStoreException.kt$DataStoreException.Companion$@JvmStatic @Throws(DataStoreException::class) fun &lt;T&gt; checkNotEmpty(optional: Optional&lt;T&gt;, field: String): T</ID>
    <ID>UndocumentedPublicFunction:DataStoreException.kt$DataStoreException.Companion$@JvmStatic @Throws(DataStoreException::class) fun &lt;T&gt; checkNotNull(reference: T?, field: String): T</ID>
    <ID>UndocumentedPublicFunction:DateTaskData.kt$DateTaskData.Companion$@JvmStatic fun fromDate(date: Date?): Optional&lt;TaskData&gt;</ID>
    <ID>UndocumentedPublicFunction:DateTaskFragment.kt$DateTaskFragment$@TestOnly fun getDatePickerDialog(): DatePickerDialog?</ID>
    <ID>UndocumentedPublicFunction:DateTaskFragment.kt$DateTaskFragment$fun showDateDialog()</ID>
    <ID>UndocumentedPublicFunction:DateTaskViewModel.kt$DateTaskViewModel$fun updateResponse(date: Date)</ID>
    <ID>UndocumentedPublicFunction:Debug.kt$Debug$fun &lt;T&gt; logOnFailure(fn: () -&gt; T): T?</ID>
    <ID>UndocumentedPublicFunction:Debug.kt$Debug$fun logLifecycleEvent(instance: Any)</ID>
    <ID>UndocumentedPublicFunction:DrawableUtil.kt$DrawableUtil$@ColorInt fun getColor(@ColorRes colorId: Int): Int</ID>
    <ID>UndocumentedPublicFunction:DrawableUtil.kt$DrawableUtil$fun getDrawable(@DrawableRes drawableId: Int, @ColorRes colorId: Int): Drawable?</ID>
    <ID>UndocumentedPublicFunction:DropAPinMapFragment.kt$DropAPinMapFragment.Companion$fun newInstance(viewModel: DropAPinTaskViewModel, mapFragment: MapFragment)</ID>
    <ID>UndocumentedPublicFunction:DropAPinTaskViewModel.kt$DropAPinTaskViewModel$fun dropPin()</ID>
    <ID>UndocumentedPublicFunction:DropAPinTaskViewModel.kt$DropAPinTaskViewModel$fun updateCameraPosition(position: CameraPosition)</ID>
    <ID>UndocumentedPublicFunction:DropAPinTaskViewModel.kt$DropAPinTaskViewModel$fun updateResponse(position: CameraPosition)</ID>
    <ID>UndocumentedPublicFunction:Enums.kt$Enums$@JvmStatic fun &lt;T : Enum&lt;T&gt;&gt; toEnum(enumClass: Class&lt;T&gt;, value: String): T</ID>
    <ID>UndocumentedPublicFunction:EphemeralPopups.kt$EphemeralPopups$fun showError()</ID>
    <ID>UndocumentedPublicFunction:EphemeralPopups.kt$EphemeralPopups$fun showError(@StringRes messageId: Int)</ID>
    <ID>UndocumentedPublicFunction:EphemeralPopups.kt$EphemeralPopups$fun showError(message: String)</ID>
    <ID>UndocumentedPublicFunction:EphemeralPopups.kt$EphemeralPopups$fun showFyi(@StringRes messageId: Int)</ID>
    <ID>UndocumentedPublicFunction:EphemeralPopups.kt$EphemeralPopups$fun showSuccess(@StringRes messageId: Int)</ID>
    <ID>UndocumentedPublicFunction:FluentFirestore.kt$FluentFirestore$fun batch(): WriteBatch</ID>
    <ID>UndocumentedPublicFunction:FragmentExtensions.kt$inline fun &lt;reified T : ViewModel&gt; Fragment.assistedViewModel( crossinline viewModelProducer: (SavedStateHandle) -&gt; T )</ID>
    <ID>UndocumentedPublicFunction:GeometryWrapper.kt$GeometryWrapper$fun getGeometry(): Geometry</ID>
    <ID>UndocumentedPublicFunction:GeometryWrapper.kt$GeometryWrapper.Companion$fun fromGeometry(geometry: Geometry?): GeometryWrapper</ID>
    <ID>UndocumentedPublicFunction:GeometryWrapperTypeConverter.kt$GeometryWrapperTypeConverter$@TypeConverter fun fromByteArray(jsonString: ByteArray?): GeometryWrapper?</ID>
    <ID>UndocumentedPublicFunction:GeometryWrapperTypeConverter.kt$GeometryWrapperTypeConverter$@TypeConverter fun toByteArray(geometryWrapper: GeometryWrapper?): ByteArray?</ID>
    <ID>UndocumentedPublicFunction:GroundFirestore.kt$GroundFirestore$fun surveys(): SurveysCollectionReference</ID>
    <ID>UndocumentedPublicFunction:GroundFirestore.kt$GroundFirestore$fun termsOfService(): TermsOfServiceCollectionReference</ID>
    <ID>UndocumentedPublicFunction:HomeScreenMapContainerViewModel.kt$HomeScreenMapContainerViewModel$fun closeProviders()</ID>
    <ID>UndocumentedPublicFunction:HomeScreenMapContainerViewModel.kt$HomeScreenMapContainerViewModel$fun getZoomThresholdCrossed(): Observable&lt;Nil&gt;</ID>
    <ID>UndocumentedPublicFunction:HomeScreenMapContainerViewModel.kt$HomeScreenMapContainerViewModel$fun panAndZoomCamera(position: Point)</ID>
    <ID>UndocumentedPublicFunction:HomeScreenMapContainerViewModel.kt$HomeScreenMapContainerViewModel$fun queueTileProvider(tileProvider: MapBoxOfflineTileProvider)</ID>
    <ID>UndocumentedPublicFunction:HomeScreenViewModel.kt$HomeScreenViewModel$fun onBottomSheetHidden()</ID>
    <ID>UndocumentedPublicFunction:HomeScreenViewModel.kt$HomeScreenViewModel$fun onLocationOfInterestSelected(locationOfInterest: LocationOfInterest?)</ID>
    <ID>UndocumentedPublicFunction:HomeScreenViewModel.kt$HomeScreenViewModel$fun openNavDrawer()</ID>
    <ID>UndocumentedPublicFunction:HomeScreenViewModel.kt$HomeScreenViewModel$fun showOfflineAreas()</ID>
    <ID>UndocumentedPublicFunction:HomeScreenViewModel.kt$HomeScreenViewModel$fun showSettings()</ID>
    <ID>UndocumentedPublicFunction:HomeScreenViewModel.kt$HomeScreenViewModel$fun showSyncStatus()</ID>
    <ID>UndocumentedPublicFunction:Job.kt$Job$fun getTask(id: String): Optional&lt;Task&gt;</ID>
    <ID>UndocumentedPublicFunction:Job.kt$Job$fun hasData(): Boolean</ID>
    <ID>UndocumentedPublicFunction:JobDao.kt$JobDao$@Query("DELETE FROM job WHERE survey_id = :surveyId") fun deleteBySurveyId(surveyId: String): Completable</ID>
    <ID>UndocumentedPublicFunction:JsonArrayTypeConverter.kt$JsonArrayTypeConverter$@TypeConverter fun fromString(jsonString: String?): JSONArray?</ID>
    <ID>UndocumentedPublicFunction:JsonArrayTypeConverter.kt$JsonArrayTypeConverter$@TypeConverter fun toString(jsonArray: JSONArray?): String?</ID>
    <ID>UndocumentedPublicFunction:JsonObjectTypeConverter.kt$JsonObjectTypeConverter$@JvmStatic @TypeConverter fun fromString(jsonString: String?): JSONObject?</ID>
    <ID>UndocumentedPublicFunction:JsonObjectTypeConverter.kt$JsonObjectTypeConverter$@JvmStatic @TypeConverter fun toString(jsonObject: JSONObject?): String?</ID>
    <ID>UndocumentedPublicFunction:LocalDatabase.kt$LocalDatabase$abstract fun baseMapDao(): BaseMapDao</ID>
    <ID>UndocumentedPublicFunction:LocalDatabase.kt$LocalDatabase$abstract fun jobDao(): JobDao</ID>
    <ID>UndocumentedPublicFunction:LocalDatabase.kt$LocalDatabase$abstract fun locationOfInterestDao(): LocationOfInterestDao</ID>
    <ID>UndocumentedPublicFunction:LocalDatabase.kt$LocalDatabase$abstract fun locationOfInterestMutationDao(): LocationOfInterestMutationDao</ID>
    <ID>UndocumentedPublicFunction:LocalDatabase.kt$LocalDatabase$abstract fun multipleChoiceDao(): MultipleChoiceDao</ID>
    <ID>UndocumentedPublicFunction:LocalDatabase.kt$LocalDatabase$abstract fun offlineAreaDao(): OfflineAreaDao</ID>
    <ID>UndocumentedPublicFunction:LocalDatabase.kt$LocalDatabase$abstract fun optionDao(): OptionDao</ID>
    <ID>UndocumentedPublicFunction:LocalDatabase.kt$LocalDatabase$abstract fun submissionDao(): SubmissionDao</ID>
    <ID>UndocumentedPublicFunction:LocalDatabase.kt$LocalDatabase$abstract fun submissionMutationDao(): SubmissionMutationDao</ID>
    <ID>UndocumentedPublicFunction:LocalDatabase.kt$LocalDatabase$abstract fun surveyDao(): SurveyDao</ID>
    <ID>UndocumentedPublicFunction:LocalDatabase.kt$LocalDatabase$abstract fun taskDao(): TaskDao</ID>
    <ID>UndocumentedPublicFunction:LocalDatabase.kt$LocalDatabase$abstract fun tileSetDao(): TileSetDao</ID>
    <ID>UndocumentedPublicFunction:LocalDatabase.kt$LocalDatabase$abstract fun userDao(): UserDao</ID>
    <ID>UndocumentedPublicFunction:LocalLocationOfInterestStore.kt$LocalLocationOfInterestStore$fun findByLocationOfInterestId( id: String, vararg states: MutationEntitySyncStatus ): Single&lt;List&lt;LocationOfInterestMutationEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:LocalLocationOfInterestStore.kt$LocalLocationOfInterestStore$fun getAllMutationsAndStream(): Flowable&lt;List&lt;LocationOfInterestMutationEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:LocalLocationOfInterestStore.kt$LocalLocationOfInterestStore$suspend fun deleteNotIn(surveyId: String, ids: List&lt;String&gt;)</ID>
    <ID>UndocumentedPublicFunction:LocalLocationOfInterestStore.kt$LocalLocationOfInterestStore$suspend fun insertOrUpdate(loi: LocationOfInterest)</ID>
    <ID>UndocumentedPublicFunction:LocalValueStore.kt$LocalValueStore$fun getLastCameraPosition(surveyId: String): CameraPosition?</ID>
    <ID>UndocumentedPublicFunction:LocalValueStore.kt$LocalValueStore$fun setLastCameraPosition(surveyId: String, cameraPosition: CameraPosition)</ID>
    <ID>UndocumentedPublicFunction:LocalValueStore.kt$LocalValueStore$fun shouldDownloadOfflineAreasOverUnmeteredConnectionOnly(): Boolean</ID>
    <ID>UndocumentedPublicFunction:LocalValueStore.kt$LocalValueStore$fun shouldUploadMediaOverUnmeteredConnectionOnly(): Boolean</ID>
    <ID>UndocumentedPublicFunction:LocationManager.kt$LocationManager$@Synchronized fun disableLocationUpdates(): Single&lt;Result&lt;Boolean&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:LocationManager.kt$LocationManager$fun requestLocationUpdates()</ID>
    <ID>UndocumentedPublicFunction:LocationOfInterestDao.kt$LocationOfInterestDao$@Query("SELECT * FROM location_of_interest WHERE id = :id") fun findById(id: String): Maybe&lt;LocationOfInterestEntity&gt;</ID>
    <ID>UndocumentedPublicFunction:LocationOfInterestDao.kt$LocationOfInterestDao$@Query("SELECT * FROM location_of_interest WHERE survey_id = :surveyId AND state = :state") fun findByState(surveyId: String, state: EntityState): Flow&lt;List&lt;LocationOfInterestEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:LocationOfInterestDao.kt$LocationOfInterestDao$@Query("SELECT * FROM location_of_interest WHERE survey_id = :surveyId AND state = :state") fun findOnceAndStream( surveyId: String, state: EntityState ): Flowable&lt;List&lt;LocationOfInterestEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:LocationOfInterestHelper.kt$LocationOfInterestHelper$fun getCreatedBy(locationOfInterest: Optional&lt;LocationOfInterest&gt;): String</ID>
    <ID>UndocumentedPublicFunction:LocationOfInterestHelper.kt$LocationOfInterestHelper$fun getLabel(locationOfInterest: Optional&lt;LocationOfInterest&gt;): String</ID>
    <ID>UndocumentedPublicFunction:LocationOfInterestHelper.kt$LocationOfInterestHelper$fun getLabel(loi: LocationOfInterest): String</ID>
    <ID>UndocumentedPublicFunction:LocationOfInterestHelper.kt$LocationOfInterestHelper$fun getSubtitle(locationOfInterest: Optional&lt;LocationOfInterest&gt;): String</ID>
    <ID>UndocumentedPublicFunction:LocationOfInterestMutation.kt$LocationOfInterestMutation.Companion$fun filter(mutations: List&lt;Mutation&gt;): List&lt;LocationOfInterestMutation&gt;</ID>
    <ID>UndocumentedPublicFunction:LocationOfInterestMutationDao.kt$LocationOfInterestMutationDao$@Query( "SELECT * FROM location_of_interest_mutation " + "WHERE location_of_interest_id = :locationOfInterestId " + "AND state IN (:allowedStates)" ) fun findByLocationOfInterestId( locationOfInterestId: String, vararg allowedStates: MutationEntitySyncStatus ): Single&lt;List&lt;LocationOfInterestMutationEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:LocationOfInterestMutationDao.kt$LocationOfInterestMutationDao$@Query( "SELECT * FROM location_of_interest_mutation " + "WHERE location_of_interest_id = :locationOfInterestId " + "AND state IN (:allowedStates)" ) fun findByLocationOfInterestIdOnceAndStream( locationOfInterestId: String, vararg allowedStates: MutationEntitySyncStatus ): @Cold(terminates = false) Flowable&lt;List&lt;LocationOfInterestMutationEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:LocationOfInterestMutationDao.kt$LocationOfInterestMutationDao$@Query("SELECT * FROM location_of_interest_mutation") fun loadAllOnceAndStream(): Flowable&lt;List&lt;LocationOfInterestMutationEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:LocationTaskData.kt$LocationTaskData.Companion$fun fromString(serializedValue: String): Optional&lt;TaskData&gt;</ID>
    <ID>UndocumentedPublicFunction:LoiCollectionReference.kt$LoiCollectionReference$fun loi(id: String)</ID>
    <ID>UndocumentedPublicFunction:LoiConverter.kt$LoiConverter$fun toLoi(survey: Survey, doc: DocumentSnapshot): Result&lt;LocationOfInterest&gt;</ID>
    <ID>UndocumentedPublicFunction:MapCardAdapter.kt$MapCardAdapter$fun setCollectDataListener(listener: (MapCardUiData) -&gt; Unit)</ID>
    <ID>UndocumentedPublicFunction:MapCardAdapter.kt$MapCardAdapter$fun setLoiCardFocusedListener(listener: (MapCardUiData?) -&gt; Unit)</ID>
    <ID>UndocumentedPublicFunction:MapCardAdapter.kt$MapCardAdapter.LoiViewHolder$fun bind(loi: LocationOfInterest)</ID>
    <ID>UndocumentedPublicFunction:MapCardAdapter.kt$MapCardAdapter.SuggestLoiViewHolder$fun bind(job: Job)</ID>
    <ID>UndocumentedPublicFunction:MapFragment.kt$MapFragment$fun refresh()</ID>
    <ID>UndocumentedPublicFunction:MapStateRepository.kt$MapStateRepository$fun getCameraPosition(surveyId: String): CameraPosition?</ID>
    <ID>UndocumentedPublicFunction:MapStateRepository.kt$MapStateRepository$fun setCameraPosition(cameraPosition: CameraPosition)</ID>
    <ID>UndocumentedPublicFunction:MbtilesFootprintParser.kt$MbtilesFootprintParser$fun allTiles(file: File): Single&lt;List&lt;TileSet&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:MultipleChoice.kt$MultipleChoice$fun getIndex(id: String): Optional&lt;Int&gt;</ID>
    <ID>UndocumentedPublicFunction:MultipleChoice.kt$MultipleChoice$fun getOptionById(id: String): Option?</ID>
    <ID>UndocumentedPublicFunction:MultipleChoiceTaskData.kt$MultipleChoiceTaskData.Companion$fun fromList(multipleChoice: MultipleChoice?, ids: List&lt;String&gt;): Optional&lt;TaskData&gt;</ID>
    <ID>UndocumentedPublicFunction:MultipleChoiceTaskViewModel.kt$MultipleChoiceTaskViewModel$fun getCurrentResponse(): Optional&lt;MultipleChoiceTaskData&gt;</ID>
    <ID>UndocumentedPublicFunction:MultipleChoiceTaskViewModel.kt$MultipleChoiceTaskViewModel$fun updateResponse(options: List&lt;Option&gt;)</ID>
    <ID>UndocumentedPublicFunction:Mutation.kt$Mutation.Companion$@JvmStatic fun byDescendingClientTimestamp(): Comparator&lt;Mutation&gt;</ID>
    <ID>UndocumentedPublicFunction:Navigator.kt$Navigator$fun getNavigateUpRequests(): Observable&lt;Any&gt;</ID>
    <ID>UndocumentedPublicFunction:Navigator.kt$Navigator$fun navigate(directions: NavDirections)</ID>
    <ID>UndocumentedPublicFunction:NotificationManager.kt$NotificationManager$fun createSyncNotification( state: UploadState, title: String, total: Int, progress: Int ): Notification</ID>
    <ID>UndocumentedPublicFunction:NumberTaskData.kt$NumberTaskData.Companion$@JvmStatic fun fromNumber(number: String): Optional&lt;TaskData&gt;</ID>
    <ID>UndocumentedPublicFunction:NumberTaskViewModel.kt$NumberTaskViewModel$fun updateResponse(number: String)</ID>
    <ID>UndocumentedPublicFunction:OfflineAreaDao.kt$OfflineAreaDao$@Query("SELECT * FROM offline_base_map WHERE id = :id") fun findById(id: String): Maybe&lt;OfflineAreaEntity&gt;</ID>
    <ID>UndocumentedPublicFunction:OfflineAreaDao.kt$OfflineAreaDao$@Query("SELECT * FROM offline_base_map") fun findAllOnceAndStream(): Flowable&lt;List&lt;OfflineAreaEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:OfflineAreaRepository.kt$OfflineAreaRepository$fun addOfflineAreaAndEnqueue(area: OfflineArea): @Cold Completable</ID>
    <ID>UndocumentedPublicFunction:OfflineAreaSelectorViewModel.kt$OfflineAreaSelectorViewModel$fun onDownloadClick()</ID>
    <ID>UndocumentedPublicFunction:OfflineAreaSelectorViewModel.kt$OfflineAreaSelectorViewModel$fun requestRemoteTileSets()</ID>
    <ID>UndocumentedPublicFunction:OfflineAreaSelectorViewModel.kt$OfflineAreaSelectorViewModel$fun setViewport(viewport: LatLngBounds?)</ID>
    <ID>UndocumentedPublicFunction:PhotoResult.kt$PhotoResult$fun isEmpty(): Boolean</ID>
    <ID>UndocumentedPublicFunction:PhotoSyncWorker.kt$PhotoSyncWorker.Companion$@JvmStatic fun createInputData(sourceFilePath: String, destinationPath: String): Data</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun clearPhoto(taskId: String)</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun getCapturedPhotoPath(): String?</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun getLastPhotoResult(): Observable&lt;PhotoResult?&gt;</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun getTakePhotoClicks(): @Hot Observable&lt;Task&gt;</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun getTaskWaitingForPhoto(): String?</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun isEditable(): LiveData&lt;Boolean&gt;</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun onCapturePhotoResult(result: Boolean)</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun onPhotoResult(photoResult: PhotoResult)</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun onSelectPhotoResult(uri: Uri?)</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun onTakePhotoClick()</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun setCapturedPhotoPath(photoUri: String?)</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun setEditable(enabled: Boolean)</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun setSubmissionId(submissionId: String?)</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun setSurveyId(surveyId: String?)</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun setTaskWaitingForPhoto(taskWaitingForPhoto: String?)</ID>
    <ID>UndocumentedPublicFunction:PhotoTaskViewModel.kt$PhotoTaskViewModel$fun updateResponse(value: String)</ID>
    <ID>UndocumentedPublicFunction:PolygonDrawingMapFragment.kt$PolygonDrawingMapFragment.Companion$fun newInstance(viewModel: PolygonDrawingViewModel, mapFragment: MapFragment)</ID>
    <ID>UndocumentedPublicFunction:PolygonDrawingViewModel.kt$PolygonDrawingViewModel$fun isMarkedComplete(): Boolean</ID>
    <ID>UndocumentedPublicFunction:PolygonDrawingViewModel.kt$PolygonDrawingViewModel$fun onCompletePolygonButtonClick()</ID>
    <ID>UndocumentedPublicFunction:ReactivateLastSurveyUseCase.kt$ReactivateLastSurveyUseCase$suspend operator fun invoke()</ID>
    <ID>UndocumentedPublicFunction:RemoteDataEvent.kt$RemoteDataEvent.Companion$@JvmStatic fun &lt;T&gt; error(error: Throwable): RemoteDataEvent&lt;T&gt;</ID>
    <ID>UndocumentedPublicFunction:RemoteDataEvent.kt$RemoteDataEvent.Companion$@JvmStatic fun &lt;T&gt; loaded(entityId: String, entity: T): RemoteDataEvent&lt;T&gt;</ID>
    <ID>UndocumentedPublicFunction:RemoteDataEvent.kt$RemoteDataEvent.Companion$@JvmStatic fun &lt;T&gt; modified(entityId: String, entity: T): RemoteDataEvent&lt;T&gt;</ID>
    <ID>UndocumentedPublicFunction:RemoteDataEvent.kt$RemoteDataEvent.Companion$@JvmStatic fun &lt;T&gt; removed(entityId: String): RemoteDataEvent&lt;T&gt;</ID>
    <ID>UndocumentedPublicFunction:RemoteDataStore.kt$RemoteDataStore$fun loadSurveySummaries(user: User): @Cold Single&lt;List&lt;Survey&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:ResponseDeltasConverter.kt$ResponseDeltasConverter$@JvmStatic fun fromString(job: Job, jsonString: String?): List&lt;TaskDataDelta&gt;</ID>
    <ID>UndocumentedPublicFunction:ResponseDeltasConverter.kt$ResponseDeltasConverter$@JvmStatic fun toString(taskDataDeltas: List&lt;TaskDataDelta&gt;): String</ID>
    <ID>UndocumentedPublicFunction:ResponseMapConverter.kt$ResponseMapConverter$@JvmStatic fun fromString(job: Job, jsonString: String?): TaskDataMap</ID>
    <ID>UndocumentedPublicFunction:ResponseMapConverter.kt$ResponseMapConverter$@JvmStatic fun toString(responseDeltas: TaskDataMap): String</ID>
    <ID>UndocumentedPublicFunction:RoomLocationOfInterestStore.kt$RoomLocationOfInterestStore$fun delete(locationOfInterestId: String): Completable</ID>
    <ID>UndocumentedPublicFunction:RoomSubmissionStore.kt$RoomSubmissionStore$fun insertOrUpdate(submission: Submission): Completable</ID>
    <ID>UndocumentedPublicFunction:RoomSubmissionStore.kt$RoomSubmissionStore$fun insertOrUpdate(submission: SubmissionEntity): Completable</ID>
    <ID>UndocumentedPublicFunction:RxAutoDispose.kt$RxAutoDispose$@JvmStatic fun &lt;T&gt; autoDisposable(lifecycleOwner: LifecycleOwner): AutoDisposeConverter&lt;T&gt;</ID>
    <ID>UndocumentedPublicFunction:RxAutoDispose.kt$RxAutoDispose$fun &lt;T&gt; disposeOnDestroy(lifecycleOwner: LifecycleOwner): AutoDisposeConverter&lt;T&gt;</ID>
    <ID>UndocumentedPublicFunction:RxCompletable.kt$RxCompletable$fun completeIf(conditionFunction: Callable&lt;Boolean&gt;): Completable</ID>
    <ID>UndocumentedPublicFunction:RxCompletable.kt$RxCompletable$fun completeOrError(supplier: Supplier&lt;Boolean&gt;, errorClass: Class&lt;out Throwable&gt;): Completable</ID>
    <ID>UndocumentedPublicFunction:RxFusedLocationProviderClient.kt$RxFusedLocationProviderClient$@SuppressLint("MissingPermission") fun requestLocationUpdates( locationRequest: LocationRequest, locationCallback: LocationSharedFlowCallback ): Completable</ID>
    <ID>UndocumentedPublicFunction:RxFusedLocationProviderClient.kt$RxFusedLocationProviderClient$fun removeLocationUpdates(locationCallback: LocationSharedFlowCallback): Completable</ID>
    <ID>UndocumentedPublicFunction:RxSettingsClient.kt$RxSettingsClient$fun checkLocationSettings(request: LocationSettingsRequest): Single&lt;LocationSettingsResponse&gt;</ID>
    <ID>UndocumentedPublicFunction:Schedulers.kt$Schedulers$fun io(): Scheduler</ID>
    <ID>UndocumentedPublicFunction:Schedulers.kt$Schedulers$fun ui(): Scheduler</ID>
    <ID>UndocumentedPublicFunction:SelectMultipleOptionAdapter.kt$SelectMultipleOptionAdapter.ViewHolder$fun bind(option: Option)</ID>
    <ID>UndocumentedPublicFunction:SelectOneOptionAdapter.kt$SelectOneOptionAdapter.ViewHolder$fun bind(option: Option)</ID>
    <ID>UndocumentedPublicFunction:SelectionAdapter.kt$SelectionAdapter$abstract fun getPosition(key: Long): Int</ID>
    <ID>UndocumentedPublicFunction:SelectionAdapter.kt$SelectionAdapter$abstract fun handleItemStateChanged(position: Int, selected: Boolean)</ID>
    <ID>UndocumentedPublicFunction:SignInState.kt$SignInState.Companion$@JvmStatic fun error(error: Throwable)</ID>
    <ID>UndocumentedPublicFunction:SignInState.kt$SignInState.Companion$@JvmStatic fun signedIn(user: User)</ID>
    <ID>UndocumentedPublicFunction:SignInState.kt$SignInState.Companion$@JvmStatic fun signedOut()</ID>
    <ID>UndocumentedPublicFunction:SignInState.kt$SignInState.Companion$@JvmStatic fun signingIn()</ID>
    <ID>UndocumentedPublicFunction:SignInViewModel.kt$SignInViewModel$fun onSignInButtonClick()</ID>
    <ID>UndocumentedPublicFunction:StyleTypeConverter.kt$StyleTypeConverter$@TypeConverter fun fromString(color: String?): Style?</ID>
    <ID>UndocumentedPublicFunction:StyleTypeConverter.kt$StyleTypeConverter$@TypeConverter fun toString(style: Style?): String?</ID>
    <ID>UndocumentedPublicFunction:SubmissionCollectionReference.kt$SubmissionCollectionReference$fun submission(id: String)</ID>
    <ID>UndocumentedPublicFunction:SubmissionCollectionReference.kt$SubmissionCollectionReference$fun submissionsByLocationOfInterestId( locationOfInterest: LocationOfInterest ): @Cold Single&lt;List&lt;Result&lt;Submission&gt;&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:SubmissionDetailsViewModel.kt$SubmissionDetailsViewModel$fun loadSubmissionDetails(args: SubmissionDetailsFragmentArgs)</ID>
    <ID>UndocumentedPublicFunction:SubmissionDocumentReference.kt$SubmissionDocumentReference$operator fun get(locationOfInterest: LocationOfInterest): @Cold Maybe&lt;Submission&gt;</ID>
    <ID>UndocumentedPublicFunction:SubmissionMutation.kt$SubmissionMutation.Companion$fun filter(mutations: List&lt;Mutation&gt;): List&lt;SubmissionMutation&gt;</ID>
    <ID>UndocumentedPublicFunction:SubmissionMutationDao.kt$SubmissionMutationDao$@Query( "SELECT * FROM submission_mutation " + "WHERE location_of_interest_id = :locationOfInterestId AND state IN (:allowedStates)" ) fun findByLocationOfInterestId( locationOfInterestId: String, vararg allowedStates: MutationEntitySyncStatus ): Single&lt;List&lt;SubmissionMutationEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:SubmissionMutationDao.kt$SubmissionMutationDao$@Query( "SELECT * FROM submission_mutation " + "WHERE location_of_interest_id = :locationOfInterestId AND state IN (:allowedStates)" ) fun findByLocationOfInterestIdOnceAndStream( locationOfInterestId: String, vararg allowedStates: MutationEntitySyncStatus ): @Cold(terminates = false) Flowable&lt;List&lt;SubmissionMutationEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:SubmissionMutationDao.kt$SubmissionMutationDao$@Query( "SELECT * FROM submission_mutation " + "WHERE submission_id = :submissionId AND state IN (:allowedStates)" ) fun findBySubmissionId( submissionId: String, vararg allowedStates: MutationEntitySyncStatus ): Single&lt;List&lt;SubmissionMutationEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:SubmissionMutationDao.kt$SubmissionMutationDao$@Query("SELECT * FROM submission_mutation") fun loadAllOnceAndStream(): Flowable&lt;List&lt;SubmissionMutationEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:SubmissionRepository.kt$SubmissionRepository$fun createOrUpdateSubmission( submission: Submission, taskDataDeltas: List&lt;TaskDataDelta&gt;, isNew: Boolean ): @Cold Completable</ID>
    <ID>UndocumentedPublicFunction:SubmissionRepository.kt$SubmissionRepository$fun createSubmission(surveyId: String, locationOfInterestId: String): @Cold Single&lt;Submission&gt;</ID>
    <ID>UndocumentedPublicFunction:SubmissionRepository.kt$SubmissionRepository$fun deleteSubmission(submission: Submission): @Cold Completable</ID>
    <ID>UndocumentedPublicFunction:SubmissionRepository.kt$SubmissionRepository$fun getSubmission( surveyId: String, locationOfInterestId: String, submissionId: String ): @Cold Single&lt;Submission&gt;</ID>
    <ID>UndocumentedPublicFunction:SubmissionStore.kt$SubmissionStore$fun findByLocationOfInterestId( id: String, vararg states: MutationEntitySyncStatus ): Single&lt;List&lt;SubmissionMutationEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:SubmissionStore.kt$SubmissionStore$fun getAllMutationsAndStream(): Flowable&lt;List&lt;SubmissionMutationEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:Survey.kt$Survey$fun getJob(jobId: String): Optional&lt;Job&gt;</ID>
    <ID>UndocumentedPublicFunction:SurveyDao.kt$SurveyDao$@Query("SELECT * FROM survey WHERE id = :id") suspend fun getSurveyByIdSuspend(id: String): SurveyEntityAndRelations?</ID>
    <ID>UndocumentedPublicFunction:SurveyDao.kt$SurveyDao$@Query("SELECT * FROM survey") fun getAll(): Flow&lt;List&lt;SurveyEntityAndRelations&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:SurveyDao.kt$SurveyDao$@Transaction @Query("SELECT * FROM survey WHERE id = :id") fun getSurveyById(id: String): Maybe&lt;SurveyEntityAndRelations&gt;</ID>
    <ID>UndocumentedPublicFunction:SurveyDocumentReference.kt$SurveyDocumentReference$fun get(): Maybe&lt;Survey&gt;</ID>
    <ID>UndocumentedPublicFunction:SurveyDocumentReference.kt$SurveyDocumentReference$fun lois()</ID>
    <ID>UndocumentedPublicFunction:SurveyDocumentReference.kt$SurveyDocumentReference$fun submissions()</ID>
    <ID>UndocumentedPublicFunction:SurveyRepository.kt$SurveyRepository$fun clearActiveSurvey()</ID>
    <ID>UndocumentedPublicFunction:SurveyRepository.kt$SurveyRepository$fun getSurveySummaries(user: User): @Cold Single&lt;List&lt;Survey&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:SurveyRepository.kt$SurveyRepository$fun syncSurveyWithRemote(id: String): @Cold Single&lt;Survey&gt;</ID>
    <ID>UndocumentedPublicFunction:SurveySelectorFragment.kt$SurveySelectorFragment$fun showPopupMenu(view: View, surveyId: String)</ID>
    <ID>UndocumentedPublicFunction:SurveySelectorViewModel.kt$SurveySelectorViewModel$fun deleteSurvey(surveyId: String)</ID>
    <ID>UndocumentedPublicFunction:SurveysCollectionReference.kt$SurveysCollectionReference$fun getReadable(user: User): @Cold Single&lt;List&lt;Survey&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:SurveysCollectionReference.kt$SurveysCollectionReference$fun survey(id: String)</ID>
    <ID>UndocumentedPublicFunction:TaskButton.kt$TaskButton$@TestOnly fun getView(): View</ID>
    <ID>UndocumentedPublicFunction:TaskButton.kt$TaskButton$fun disable(): TaskButton</ID>
    <ID>UndocumentedPublicFunction:TaskButton.kt$TaskButton$fun enable(): TaskButton</ID>
    <ID>UndocumentedPublicFunction:TaskButton.kt$TaskButton$fun hide(): TaskButton</ID>
    <ID>UndocumentedPublicFunction:TaskButton.kt$TaskButton$fun show(): TaskButton</ID>
    <ID>UndocumentedPublicFunction:TaskData.kt$TaskData$fun getDetailsText(): String</ID>
    <ID>UndocumentedPublicFunction:TaskData.kt$TaskData$fun isEmpty(): Boolean</ID>
    <ID>UndocumentedPublicFunction:TaskData.kt$fun TaskData?.isNotNullOrEmpty(): Boolean</ID>
    <ID>UndocumentedPublicFunction:TaskData.kt$fun TaskData?.isNullOrEmpty(): Boolean</ID>
    <ID>UndocumentedPublicFunction:TaskEntityType.kt$TaskEntityType$fun toTaskType(): Task.Type</ID>
    <ID>UndocumentedPublicFunction:TaskEntityType.kt$TaskEntityType.Companion$@JvmStatic @TypeConverter fun fromInt(intValue: Int): TaskEntityType</ID>
    <ID>UndocumentedPublicFunction:TaskEntityType.kt$TaskEntityType.Companion$@JvmStatic @TypeConverter fun toInt(value: TaskEntityType?): Int</ID>
    <ID>UndocumentedPublicFunction:TaskEntityType.kt$TaskEntityType.Companion$fun fromTaskType(type: Task.Type): TaskEntityType</ID>
    <ID>UndocumentedPublicFunction:TaskHeaderPopupView.kt$TaskHeaderPopupView$fun show(anchor: View, text: String?)</ID>
    <ID>UndocumentedPublicFunction:TaskViewFactory.kt$TaskViewFactory$fun createWithHeader(layoutInflater: LayoutInflater): TaskView</ID>
    <ID>UndocumentedPublicFunction:TaskViewFactory.kt$TaskViewFactory$fun createWithoutHeader( layoutInflater: LayoutInflater, @DrawableRes iconResId: Int? = null, @StringRes labelResId: Int? = null ): TaskView</ID>
    <ID>UndocumentedPublicFunction:TermsOfServiceCollectionReference.kt$TermsOfServiceCollectionReference$fun terms()</ID>
    <ID>UndocumentedPublicFunction:TermsOfServiceConverter.kt$TermsOfServiceConverter$fun toTerms(doc: DocumentSnapshot): TermsOfService</ID>
    <ID>UndocumentedPublicFunction:TermsOfServiceDocumentReference.kt$TermsOfServiceDocumentReference$fun get(): Maybe&lt;TermsOfService&gt;</ID>
    <ID>UndocumentedPublicFunction:TermsOfServiceDocumentReference.kt$TermsOfServiceDocumentReference$fun terms()</ID>
    <ID>UndocumentedPublicFunction:TermsOfServiceViewModel.kt$TermsOfServiceViewModel$fun onButtonClicked()</ID>
    <ID>UndocumentedPublicFunction:TextTaskData.kt$TextTaskData.Companion$@JvmStatic fun fromString(text: String): Optional&lt;TaskData&gt;</ID>
    <ID>UndocumentedPublicFunction:TextTaskViewModel.kt$TextTaskViewModel$fun updateResponse(text: String)</ID>
    <ID>UndocumentedPublicFunction:TileSet.kt$TileSet.Companion$@JvmStatic fun pathFromId(tileSetId: String): String</ID>
    <ID>UndocumentedPublicFunction:TileSetDao.kt$TileSetDao$@Query("DELETE FROM tile_sources WHERE url = :url") fun deleteByUrl(url: String): Maybe&lt;Int&gt;</ID>
    <ID>UndocumentedPublicFunction:TileSetDao.kt$TileSetDao$@Query("SELECT * FROM tile_sources WHERE id = :id") fun findById(id: String): Maybe&lt;TileSetEntity&gt;</ID>
    <ID>UndocumentedPublicFunction:TileSetDao.kt$TileSetDao$@Query("SELECT * FROM tile_sources WHERE path = :path") fun findByPath(path: String): Maybe&lt;TileSetEntity&gt;</ID>
    <ID>UndocumentedPublicFunction:TileSetDao.kt$TileSetDao$@Query("SELECT * FROM tile_sources WHERE state = :state") fun findByState(state: Int): Single&lt;List&lt;TileSetEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:TileSetDao.kt$TileSetDao$@Query("SELECT * FROM tile_sources WHERE url = :url") fun findByUrl(url: String): Maybe&lt;TileSetEntity&gt;</ID>
    <ID>UndocumentedPublicFunction:TileSetDao.kt$TileSetDao$@Query("SELECT * FROM tile_sources") fun findAllOnceAndStream(): Flowable&lt;List&lt;TileSetEntity&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:TileSetDao.kt$TileSetDao$@Query("UPDATE tile_sources SET basemap_count=:newCount WHERE url = :url") fun updateBasemapReferenceCount(newCount: Int, url: String): Single&lt;Int&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeTaskData.kt$TimeTaskData.Companion$@JvmStatic fun fromDate(time: Date): Optional&lt;TaskData&gt;</ID>
    <ID>UndocumentedPublicFunction:TimeTaskFragment.kt$TimeTaskFragment$@TestOnly fun getTimePickerDialog(): TimePickerDialog?</ID>
    <ID>UndocumentedPublicFunction:TimeTaskFragment.kt$TimeTaskFragment$fun showTimeDialog()</ID>
    <ID>UndocumentedPublicFunction:TimeTaskViewModel.kt$TimeTaskViewModel$fun updateResponse(date: Date)</ID>
    <ID>UndocumentedPublicFunction:TwoLineToolbar.kt$TwoLineToolbar$fun setSubtitle(subtitle: String?)</ID>
    <ID>UndocumentedPublicFunction:TwoLineToolbar.kt$TwoLineToolbar$fun setTitle(title: String?)</ID>
    <ID>UndocumentedPublicFunction:UserDao.kt$UserDao$@Transaction @Query("SELECT * FROM user WHERE id = :id") fun findById(id: String): Maybe&lt;UserEntity&gt;</ID>
    <ID>UndocumentedPublicFunction:UserMediaRepository.kt$UserMediaRepository$@Throws(FileNotFoundException::class) fun addImageToGallery(filePath: String, title: String): String</ID>
    <ID>UndocumentedPublicFunction:UserMediaRepository.kt$UserMediaRepository$fun createImageFile(fieldId: String): File</ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$fun getUser(userId: String): @Cold Single&lt;User&gt;</ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$fun saveUser(user: User): @Cold Completable</ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$suspend fun saveUserSuspend(user: User)</ID>
    <ID>UndocumentedPublicFunction:ViewUtil.kt$ViewUtil$@JvmStatic fun assignGeneratedId(view: View?)</ID>
    <ID>UndocumentedPublicFunction:ViewUtil.kt$ViewUtil$fun getScreenHeight(activity: Activity): Int</ID>
    <ID>UndocumentedPublicFunction:ViewUtil.kt$ViewUtil$fun getScreenWidth(activity: Activity): Int</ID>
    <ID>UndocumentedPublicFunction:ViewUtil.kt$ViewUtil$fun hideSoftInputFrom(fragment: Fragment)</ID>
  </CurrentIssues>
</SmellBaseline>
